---
import { type CollectionEntry, render } from "astro:content";
import { collectionDateSort } from "@/utils/date";
import { getAllPosts } from "@/data/post";

import Masthead from "@/components/blog/Masthead.astro";
import TOC from "@/components/blog/TOC.astro";

import PostNavigation from "@/components/PostNavigation.astro";
import BaseLayout from "./Base.astro";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const { ogImage, title, description, updatedDate, publishDate } = post.data;
const socialImage = ogImage ?? `/og-image/${post.id}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings, remarkPluginFrontmatter } = await render(post);
const readingTime: string = remarkPluginFrontmatter.readingTime;

const posts = await getAllPosts();
const allPostsByDate = posts
	.sort(collectionDateSort)

function getNextPost() {
  let postIndex: number;
  for (const post of allPostsByDate) {
    if (post.id === Astro.props.post.id) {
      postIndex = allPostsByDate.indexOf(post);
      return allPostsByDate[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex: number;
  for (const post of allPostsByDate) {
    if (post.id === Astro.props.post.id) {
      postIndex = allPostsByDate.indexOf(post);
      return allPostsByDate[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();
---

<BaseLayout
	meta={{
		articleDate,
		description,
		ogImage: socialImage,
		title,
	}}
>
	<article class="grow break-words" data-pagefind-body>
		<div id="blog-hero" class="mb-12"><Masthead content={post} readingTime={readingTime} /></div>
		<div class="flex flex-col gap-10">
			{!!headings.length && <TOC headings={headings} />}
			<div
				class="prose prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ms-5 prose-headings:hover:before:text-muted-foreground sm:prose-th:before:content-none prose-a:text-blue-600 dark:prose-a:text-blue-400 marker:text-foreground"
			>
				<slot />
			</div>
		</div>
	</article>
  <PostNavigation prevPost={prevPost} nextPost={nextPost} />
	<button
		class="border-2 hover:border-foreground fixed end-4 bottom-8 z-90 flex h-10 w-10 translate-y-28 cursor-pointer items-center justify-center rounded-md bg-accent text-3xl opacity-0 transition-all transition-discrete duration-300 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 sm:end-8 size-9"
		data-show="false"
		id="to-top-btn"
	>
		<span class="sr-only">Back to top</span>
		<svg
			aria-hidden="true"
			class="h-5 w-5"
			fill="none"
			focusable="false"
			stroke="currentColor"
			stroke-width="2"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
</BaseLayout>

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>
