---
import { type CollectionEntry, render } from "astro:content";
import { collectionDateSort } from "@/utils/date";
import { getAllPosts } from "@/data/post";

import Masthead from "@/components/blog/Masthead.astro";
import BackToTop from "@/components/BackToTop.astro";
import TOC from "@/components/blog/TOC.astro";

import PostNavigation from "@/components/PostNavigation.astro";
import BaseLayout from "./Base.astro";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const { ogImage, title, description, updatedDate, publishDate } = post.data;
const socialImage = ogImage ?? `/og-image/${post.id}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings, remarkPluginFrontmatter } = await render(post);
const readingTime: string = remarkPluginFrontmatter.readingTime;

const posts = await getAllPosts();
const allPostsByDate = posts
	.sort(collectionDateSort)

function getNextPost() {
  let postIndex: number;
  for (const post of allPostsByDate) {
    if (post.id === Astro.props.post.id) {
      postIndex = allPostsByDate.indexOf(post);
      return allPostsByDate[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex: number;
  for (const post of allPostsByDate) {
    if (post.id === Astro.props.post.id) {
      postIndex = allPostsByDate.indexOf(post);
      return allPostsByDate[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();
const canonicalURL = new URL(Astro.url.pathname, Astro.site).href;
---

<BaseLayout
	meta={{
		articleDate,
		description,
		ogImage: socialImage,
		title,
	}}
>
	<article class="grow break-words" data-pagefind-body>
		<div id="blog-hero" class="mb-6"><Masthead content={post} readingTime={readingTime} /></div>
		<div class="flex flex-col gap-10">
			{!!headings.length && <TOC headings={headings} />}
			<div
				class="prose dark:prose-invert prose-quoteless prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ms-5 prose-headings:hover:before:text-muted-foreground sm:prose-th:before:content-none prose-a:text-blue-600 dark:prose-a:text-blue-400"
			>
				<slot />
			</div>
		</div>
	</article>
  <BackToTop />
  <PostNavigation prevPost={prevPost} nextPost={nextPost} />
  <hr />
  <br />
  <br />
  <div class="prose dark:prose-invert">
    If you like this kind of content you can help me
    <a
      target="_blank"
      href={`https://x.com/intent/tweet?text=${title + '%0Aby @hudamnhd'}&url=${canonicalURL}`}
    >
      sharing this post on X</a
    >. Thank you!
  </div>
</BaseLayout>

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	// const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;
	//
	// function callback(entries: IntersectionObserverEntry[]) {
	// 	entries.forEach((entry) => {
	// 		// only show the scroll to top button when the heading is out of view
	// 		scrollBtn.dataset.show = (!entry.isIntersecting).toString();
	// 	});
	// }

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	// const observer = new IntersectionObserver(callback);
	// observer.observe(targetHeader);
</script>
