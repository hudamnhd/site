---
import { type CollectionEntry, getCollection, render } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import BackToPrev from "@/components/BackToPrev.astro";
import Base from "@/layouts/Base.astro";
import { readingTime } from "@/lib/utils";
import BackToTop from "@/components/BackToTop.astro";
import PostNavigation from '@/components/PostNavigation.astro';

const { data, body } = Astro.props;
const { title, description, publishDate, ogImage } = data;
let canonicalURL = new URL(Astro.url.pathname, Astro.site).href;

const posts = (await getCollection("blog"))
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());

function getNextPost() {
  let postIndex;
  for (const post of posts) {
    if (post.id === Astro.params.slug) {
      postIndex = posts.indexOf(post);
      return posts[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex;
  for (const post of posts) {
    if (post.id === Astro.params.slug) {
      postIndex = posts.indexOf(post);
      return posts[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();
---

<Base title={title} description={description} ogImage={ogImage}>
  <article class="content border-b">
    <div>
      <div class="pb-2.5 border-b">
        <div class="flex items-center gap-2">
          <p class="my-0 text-sm">
            <FormattedDate date={publishDate} />
          </p>
          <span>/</span>
          <p class="my-0 text-sm">
            {readingTime(body)}
          </p>
        </div>
        <h1 class="my-1!">
          {title}
        </h1>
        <p class="my-1">
          {description}
        </p>
  {
    !!data.tags?.length && (
        <div class="content">
            {data.tags.map((tag:string, i:number) => (
                <>
                    {/* prettier-ignore */}
                    <span class="font-medium">
                      <a class="before:content-['#']" href={`/tags/${tag}/`}><span class="sr-only">View more blogs with the tag&nbsp;</span>{tag}
                        </a>{i < data.tags.length - 1 && ", "}
                    </span>
                </>
            ))}
        </div>
    )
  }
      </div>
      <slot />

    </div>
  </article>
  <div class="content">
    <p>If you like this kind of content you can help me
    <a
      target="_blank"
      href={`https://x.com/intent/tweet?text=${title + '%0Aby @hudamnhd'}&url=${canonicalURL}`}
    >
      sharing this post on X</a
    >. Thank you!</p>
  </div>
  <br/>
  <BackToTop />
  <br/>
  <br/>
  <PostNavigation prevPost={prevPost} nextPost={nextPost} />
  <script is:inline>
    function init() {
      const scrollBtn = document.getElementById("to-top-btn");
      if (scrollBtn) {
        scrollBtn.addEventListener("click", () => {
            document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
        });
      }

      async function copyCode(block, button) {
        const code = block.querySelector("code");
        const text = code?.innerText || "";

        try {
          await navigator.clipboard.writeText(text);

          // Visual feedback that the task is completed
          button.innerHTML = checkMarkImg;

          setTimeout(() => {
            button.innerHTML = copyImg;
          }, 700);
        } catch (error) {
          console.error("Failed to copy code: ", error);
        }
      }

      const copyImg = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-copy-icon lucide-copy"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></svg>`
      const checkMarkImg = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check-check-icon lucide-check-check"><path d="M18 6 7 17l-5-5"/><path d="m22 10-7.5 7.5L13 16"/></svg>`
      const preBlocks = Array.from(document.querySelectorAll("pre"));

      for (const preBlock of preBlocks) {
        renderCopyBtn(preBlock);
      }

      function renderCopyBtn(preBlock) {
        let wrapper = document.createElement("div");
        wrapper.style.position = "relative";
        const copyButton = document.createElement("button");

        copyButton.className = "copy-code";
        copyButton.setAttribute("aria-label", "Copy code to clipboard");
        copyButton.setAttribute("title", "Copy code to clipboard");
        copyButton.innerHTML = copyImg;

        preBlock.setAttribute("tabindex", "0");
        preBlock.appendChild(copyButton);
        // wrap codebock with relative parent element
        preBlock.parentNode.insertBefore(wrapper, preBlock);
        wrapper.appendChild(preBlock);

        copyButton.addEventListener("click", async () => {
          await copyCode(preBlock, copyButton);
        });
      }
    }

    document.addEventListener("astro:after-swap", init);
    init();
  </script>
</Base>


