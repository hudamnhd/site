---
import { type CollectionEntry, render } from "astro:content";
import { collectionDateSort } from "@/utils/date";
import { getAllPosts } from "@/data/post";

import Masthead from "@/components/blog/Masthead.astro";
import TOC from "@/components/blog/TOC.astro";

import PostNavigation from "@/components/PostNavigation.astro";
import BaseLayout from "./Base.astro";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const { ogImage, title, description, updatedDate, publishDate } = post.data;
const socialImage = ogImage ?? `/og-image/${post.id}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings, remarkPluginFrontmatter } = await render(post);
const readingTime: string = remarkPluginFrontmatter.readingTime;

const posts = await getAllPosts();
const allPostsByDate = posts
	.sort(collectionDateSort)

function getNextPost() {
  let postIndex: number;
  for (const post of allPostsByDate) {
    if (post.id === Astro.props.post.id) {
      postIndex = allPostsByDate.indexOf(post);
      return allPostsByDate[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex: number;
  for (const post of allPostsByDate) {
    if (post.id === Astro.props.post.id) {
      postIndex = allPostsByDate.indexOf(post);
      return allPostsByDate[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();
---

<BaseLayout
	meta={{
		articleDate,
		description,
		ogImage: socialImage,
		title,
	}}
>
	<article class="grow break-words" data-pagefind-body>
		<div id="blog-hero" class="mb-12"><Masthead content={post} readingTime={readingTime} /></div>
		<div class="flex flex-col gap-10">
			{!!headings.length && <TOC headings={headings} />}
			<div
				class="prose prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ms-5 prose-headings:hover:before:text-muted-foreground sm:prose-th:before:content-none prose-a:text-blue-600 dark:prose-a:text-blue-400 marker:text-foreground"
			>
				<slot />
			</div>
		</div>
	</article>

<div class="sticky bottom-8 max-w-3xl mx-auto flex items-end justify-end mt-10 z-90">
    <button id="to-top-btn"
      data-show="false"
      class="relative group w-fit flex pl-8 pr-3 py-1.5 flex-nowrap rounded-md text-foreground/80 hover:text-foreground border border-border bg-background hover:bg-accent opacity-0 transition-all transition-discrete duration-300 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 ease-in-out z-50">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="absolute top-1/2 left-2 -translate-y-1/2 size-4 stroke-2 fill-none stroke-current rotate-90">
        <line x1="5" y1="12" x2="19" y2="12" class="translate-x-2 group-hover:translate-x-0 scale-x-0 group-hover:scale-x-100 transition-transform duration-300 ease-in-out" />
        <polyline points="12 5 5 12 12 19" class="translate-x-1 group-hover:translate-x-0 transition-transform duration-300 ease-in-out" />
      </svg>
      <div class="text-sm">
        Back to top
      </div>
    </button>
  </div>
  <PostNavigation prevPost={prevPost} nextPost={nextPost} />
</BaseLayout>

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>
