---
import { Image } from "astro:assets";
import FormattedDate from "@/components/FormattedDate.astro";
import PageLayout from "@/layouts/Base.astro";
import TOC from "@/components/blog/TOC.astro";
import { type CollectionEntry, getCollection, render } from "astro:content";

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter(post => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { slug: project.id },
    props: project,
  }));
}
type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { headings, remarkPluginFrontmatter } = await render(project);
const readingTime: string = remarkPluginFrontmatter.readingTime;
const { Content } = await render(project);

const meta = {
	description:
		project.data.description,
	title: project.data.title,
};

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: "long",
};
---

<PageLayout meta={meta}>

  <article class="grow break-words" data-pagefind-body>
    <div id="blog-hero" class="mb-12">
      <h1 class="title">
        {project.data.title}
      </h1>
      <div class="flex flex-wrap items-center gap-x-3 gap-y-2">
        <p class="font-semibold text-foreground/80">
        <FormattedDate date={project.data.date} dateTimeOptions={dateTimeOptions} /> /{" "}
          {readingTime}
        </p>
        {
        project.data.updatedDate && (
            <span class="bg-muted text-sm rounded-lg px-2 py-1">
              Updated:
              <FormattedDate class="ms-1" date={project.data.updatedDate} dateTimeOptions={dateTimeOptions} />
            </span>
          )
        }
      </div>
    </div>
    <div class="flex flex-col gap-10">
      {!!headings.length && <TOC headings={headings} />}
      <div
        class="prose max-w-none prose-p:my-1 prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ms-5 prose-headings:hover:before:text-muted-foreground sm:prose-th:before:content-none prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-img:rounded-md"
      >
        <Content />
      </div>
    </div>
  </article>
      {(project.data.demoURL || project.data.repoURL) && (
        <nav class="animate flex gap-1 hidden">
          {project.data.demoURL && (
            <a href={project.data.demoURL} external>
              demo
            </a>
          )}
          {project.data.demoURL && project.data.repoURL && (
            <span>/</span>
          )}
          {project.data.repoURL && (
            <a href={project.data.repoURL} external>
              repo
            </a>
          )}
        </nav>
      )}

</PageLayout>
